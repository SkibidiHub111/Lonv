local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local StatsService = game:GetService("Stats")
local LocalPlayer = Players.LocalPlayer
local CoreGui = game:GetService("CoreGui")

pcall(function()
    for _, v in pairs(CoreGui:GetChildren()) do
        if v:IsA("ScreenGui") and v.Name == "CrystalHubUI" then
            v:Destroy()
        end
    end
end)

local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "CrystalHubUI"
ScreenGui.IgnoreGuiInset = true
ScreenGui.Parent = CoreGui

local Frame = Instance.new("Frame")
Frame.Size = UDim2.new(1, 0, 1, 0)
Frame.Position = UDim2.new(0, 0, 0, 0)
Frame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
Frame.BackgroundTransparency = 0.3
Frame.Parent = ScreenGui

local Title = Instance.new("TextLabel")
Title.Size = UDim2.new(1, 0, 0.15, 0)
Title.Position = UDim2.new(0, 0, 0.35, 0)
Title.BackgroundTransparency = 1
Title.Text = "Crystal Hub"
Title.TextColor3 = Color3.fromRGB(225, 222, 255)
Title.TextScaled = true
Title.Font = Enum.Font.FredokaOne
Title.TextXAlignment = Enum.TextXAlignment.Center
Title.TextYAlignment = Enum.TextYAlignment.Center
Title.Parent = Frame

local StatusLabel = Instance.new("TextLabel")
StatusLabel.Size = UDim2.new(1, 0, 0.08, 0)
StatusLabel.Position = UDim2.new(0, 0, 0.55, 0)
StatusLabel.BackgroundTransparency = 1
StatusLabel.Text = "Status: Waiting..."
StatusLabel.TextColor3 = Color3.fromRGB(0, 255, 0)
StatusLabel.TextScaled = true
StatusLabel.Font = Enum.Font.GothamBold
StatusLabel.TextXAlignment = Enum.TextXAlignment.Center
StatusLabel.TextYAlignment = Enum.TextYAlignment.Center
StatusLabel.Parent = Frame

local StatsLabel = Instance.new("TextLabel")
StatsLabel.Size = UDim2.new(1, 0, 0.06, 0)
StatsLabel.Position = UDim2.new(0, 0, 0.65, 0)
StatsLabel.BackgroundTransparency = 1
StatsLabel.Text = "FPS: 0 | Players: 0 | Ping: 0ms"
StatsLabel.TextColor3 = Color3.fromRGB(255, 255, 0)
StatsLabel.TextScaled = true
StatsLabel.Font = Enum.Font.GothamBold
StatsLabel.TextXAlignment = Enum.TextXAlignment.Center
StatsLabel.TextYAlignment = Enum.TextYAlignment.Center
StatsLabel.Parent = Frame

RunService.RenderStepped:Connect(function()
    local fps = math.floor(1 / RunService.RenderStepped:Wait())
    local ping = math.floor(StatsService.Network.ServerStatsItem["Data Ping"]:GetValue())
    local count = #Players:GetPlayers()
    StatsLabel.Text = string.format("FPS: %d | Players: %d | Ping: %dms", fps, count, ping)
end)

function UpdateStatus(text, color)
    StatusLabel.Text = "Status: "..text
    if color then
        StatusLabel.TextColor3 = color
    end
end

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local function UpdateStatus(text,color)
    pcall(function()
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "Auto Cyborg",
            Text = text,
            Duration = 3
        })
    end)
end

local function sendWebhook(statusText)
    local cfg = getgenv().AutoCyborg["Webhook"]
    if not cfg or not cfg["Enable"] or cfg["Url"] == "" then return end

    local content = ""
    if cfg["PingEveryoneWhenDone"] and statusText:find("Done all") then
        content = "@everyone"
    end

    local data = {
        ["username"] = "Crystal Hub",
        ["embeds"] = {{
            ["title"] = "Crystal Hub Auto Cyborg",
            ["color"] = 65280,
            ["fields"] = {
                {
                    ["name"] = "User",
                    ["value"] = LocalPlayer.Name,
                    ["inline"] = false
                },
                {
                    ["name"] = "Status",
                    ["value"] = statusText,
                    ["inline"] = false
                }
            }
        }},
        ["content"] = content
    }

    pcall(function()
        request({
            Url = cfg["Url"],
            Body = HttpService:JSONEncode(data),
            Method = "POST",
            Headers = {["Content-Type"] = "application/json"}
        })
    end)
end

task.spawn(function()
    task.wait(2)
    local team = getgenv().AutoCyborg["Team"]
    if team == "Marines" or team == "Pirates" then
        pcall(function()
            ReplicatedStorage.Remotes.CommF_:InvokeServer("SetTeam", team)
        end)
    end
end)

task.wait(5)

local function getChar() return LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait() end
local function getHRP() return getChar():WaitForChild("HumanoidRootPart") end

RunService.Stepped:Connect(function()
    local char = getChar()
    if char then
        for _, v in ipairs(char:GetChildren()) do
            if v:IsA("BasePart") then v.CanCollide = false end
        end
    end
end)

local aura
function enableAura()
    local hrp = getHRP()
    if aura and aura.Parent then aura:Destroy() end
    aura = Instance.new("Part")
    aura.Shape = Enum.PartType.Ball
    aura.Size = Vector3.new(6,6,6)
    aura.Color = Color3.fromRGB(0,255,0)
    aura.Material = Enum.Material.Neon
    aura.Transparency = 0.35
    aura.CanCollide = false
    aura.Anchored = false
    aura.Massless = true
    aura.Parent = hrp
    local weld = Instance.new("WeldConstraint", aura)
    weld.Part0, weld.Part1 = aura, hrp
end
function disableAura()
    if aura and aura.Parent then aura:Destroy() end
    aura = nil
end

local ChestCooldown = {}
local function keyFromVector3(v)
    local function r(x) return math.floor(x*10+0.5)/10 end
    return string.format("%.1f,%.1f,%.1f", r(v.X), r(v.Y), r(v.Z))
end
local function onCooldown(v3)
    local k = keyFromVector3(v3)
    local t = ChestCooldown[k]
    return t and (t > os.clock())
end
local function setCooldown(v3, secs)
    ChestCooldown[keyFromVector3(v3)] = os.clock() + secs
end
local function getChests()
    local list = {}
    for _, inst in ipairs(workspace:GetDescendants()) do
        if inst:IsA("BasePart")
            and inst.Parent
            and string.lower(inst.Name):find("chest")
            and not onCooldown(inst.Position) then
            table.insert(list, inst)
        end
    end
    table.sort(list,function(a,b)
        return (a.Position-getHRP().Position).Magnitude < (b.Position-getHRP().Position).Magnitude
    end)
    return list
end

local function tweenTo(targetPos)
    local hrp = getHRP()
    if not hrp then return end
    local dist = (hrp.Position - targetPos).Magnitude
    local duration = math.max(dist / getgenv().AutoCyborg["TweenSpeed"], 0.25)
    local tween = TweenService:Create(hrp, TweenInfo.new(duration, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {CFrame = CFrame.new(targetPos)})
    tween:Play()
    local done=false
    tween.Completed:Connect(function() done=true end)
    local conn
    conn = RunService.RenderStepped:Connect(function()
        if not hrp or not hrp.Parent then conn:Disconnect() done=true return end
        hrp.Velocity = Vector3.new(0,0,0)
    end)
    repeat task.wait() until done
    conn:Disconnect()
end

local function moveToChest(chest)
    if not chest or not chest.Parent then return end
    local hrp = getHRP()
    local targetY = chest.Position.Y + 6
    tweenTo(Vector3.new(hrp.Position.X, targetY + 12, hrp.Position.Z))
    task.wait(0.05)
    if chest and chest.Parent then
        tweenTo(Vector3.new(chest.Position.X, targetY, chest.Position.Z))
    end
end

local function touchChest(part)
    if not part or not part.Parent then return end
    local hrp = getHRP()
    pcall(function()
        firetouchinterest(hrp, part, 0)
        task.wait(0.05)
        firetouchinterest(hrp, part, 1)
    end)
end

local function hasKey()
    return LocalPlayer.Backpack:FindFirstChild("Fist of Darkness") or LocalPlayer.Character:FindFirstChild("Fist of Darkness")
end

local function checkNoChip()
    local gui = LocalPlayer:WaitForChild("PlayerGui")
    for _, scr in pairs(gui:GetDescendants()) do
        if (scr:IsA("TextLabel") or scr:IsA("TextButton")) and (scr.Text:find("Không tìm thấy con Chip.") or scr.Text:find("Microchip not found.")) then
            return true
        end
    end
    return false
end

repeat task.wait() until workspace:FindFirstChild("Map") 
    and workspace.Map:FindFirstChild("CircleIsland") 
    and workspace.Map.CircleIsland:FindFirstChild("RaidSummon") 
    and workspace.Map.CircleIsland.RaidSummon:FindFirstChild("Button") 
    and workspace.Map.CircleIsland.RaidSummon.Button:FindFirstChild("Main") 
    and workspace.Map.CircleIsland.RaidSummon.Button.Main:FindFirstChild("ClickDetector")
local btn = workspace.Map.CircleIsland.RaidSummon.Button.Main.ClickDetector

task.spawn(function()
    task.wait(3)
    local success, CyborgCheck = pcall(function()
        return ReplicatedStorage.Remotes.CommF_:InvokeServer("CyborgTrainer", "Check")
    end)
    if success and CyborgCheck == 2 then
        UpdateStatus("✅ Already Cyborg - Done all!", Color3.fromRGB(0,255,255))
        sendWebhook("✅ Already Cyborg - Done all!")
        getgenv().AutoCyborg["Enable"] = false
        return
    end
end)

task.spawn(function()
    while getgenv().AutoCyborg["Enable"] do
        local success, CyborgCheck = pcall(function()
            return ReplicatedStorage.Remotes.CommF_:InvokeServer("CyborgTrainer", "Check")
        end)
        if success and CyborgCheck == 2 then
            UpdateStatus("✅ Already Cyborg - Done all!", Color3.fromRGB(0,255,255))
            sendWebhook("✅ Already Cyborg - Done all!")
            break
        end

        if not hasKey() then
            pcall(function()
                fireclickdetector(btn,0)
                task.wait(0.1)
                fireclickdetector(btn,0)
            end)
        end

        if not hasKey() and checkNoChip() then
            local chests = getChests()
            if #chests > 0 then 
                UpdateStatus("Collecting chests ("..#chests..")",Color3.fromRGB(0,255,0))
                sendWebhook("📦 Collecting chests ("..#chests..")")
            end
            for _, chest in ipairs(chests) do
                if chest and chest.Parent then
                    enableAura()
                    moveToChest(chest)
                    if chest and chest.Parent then
                        touchChest(chest)
                        setCooldown(chest.Position,60)
                    end
                    disableAura()
                    task.wait(0.05)
                end
            end

            if #chests <= getgenv().AutoCyborg["HopServerIfChest"] then
                UpdateStatus("Hopping server...",Color3.fromRGB(255,0,0))
                sendWebhook("Server not have key, hopping server...")
                local servers = HttpService:JSONDecode(game:HttpGet("https://games.roblox.com/v1/games/"..game.PlaceId.."/servers/Public?sortOrder=Asc&limit=100"))
                local list = {}
                for _, s in ipairs(servers.data) do
                    if s.playing < s.maxPlayers then
                        table.insert(list, s.id)
                    end
                end
                if #list > 0 then
                    TeleportService:TeleportToPlaceInstance(game.PlaceId, list[math.random(1,#list)])
                    return
                end
            end
        end

        if hasKey() then
            local keyTool = LocalPlayer.Backpack:FindFirstChild("Fist of Darkness")
            if keyTool and not LocalPlayer.Character:FindFirstChild("Fist of Darkness") then
                keyTool.Parent = LocalPlayer.Character
                task.wait(0.1)            
            end
            pcall(function()
                fireclickdetector(btn,0)
                task.wait(0.1)
                fireclickdetector(btn,0)
            end)
            UpdateStatus("Done all!",Color3.fromRGB(0,255,255))
            sendWebhook("Done all!")
            break
        end

        task.wait(1)
    end
end)
